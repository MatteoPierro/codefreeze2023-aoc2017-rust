mod day2soundsfine;
mod input_reader;

fn main() {
    println!("Hello, world!");
}

fn solve_captcha(input: Vec<i32>) -> i32 {
    circular_windowing(input)
        .iter()
        .map(|(left, right)| evaluate_pair(*left, *right))
        .sum()
}

fn calculate_captcha_2(input: Vec<i32>) -> i32 {
    circular_windowing2(input)
        .iter()
        .map(|(left, right)| evaluate_pair(*left, *right))
        .sum()
}

fn circular_windowing2(input: Vec<i32>) -> Vec<(i32, i32)> {
    let length = input.len();
    let jump = length/2;
    input.iter().enumerate().map(|(index, &value)| {
        (value, input[(index + jump) % length])
    }).collect()
}

fn evaluate_pair(left: i32, right: i32) -> i32 {
    if left == right {
        right
    } else {
        0
    }
}

fn circular_windowing(mut input: Vec<i32>) -> Vec<(i32, i32)> {
    if input.len() == 0 {
        vec![]
    } else {
        input.push(*input.first().unwrap());
        window_vector(input)
    }
}

fn window_vector(vector: Vec<i32>) -> Vec<(i32, i32)> {
    (0..vector.len() - 1)
        .map(|i| (vector[i], vector[i + 1]))
        .collect()
}

#[cfg(test)]
mod captcha_test {
    use crate::*;

    #[test]
    fn test_calculate_captcha_2() {
        assert_eq!(calculate_captcha_2(vec![1,2,1,2]), 6);
    }

    #[test]
    fn test_evaluate_pair() {
        assert_eq!(evaluate_pair(1, 1), 1);
    }

    #[test]
    fn test_windowing() {
        assert_eq!(window_vector(vec![1, 1, 1]), vec![(1, 1), (1, 1)]);
        assert_eq!(window_vector(vec![1, 2, 3]), vec![(1, 2), (2, 3)]);
    }

    #[test]
    fn test_circular_windowing() {
        assert_eq!(circular_windowing(vec![]), vec![]);
        assert_eq!(circular_windowing(vec![1, 1]), vec![(1, 1), (1, 1)]);
        assert_eq!(circular_windowing(vec![1, 2]), vec![(1, 2), (2, 1)]);
    }

    #[test]
    fn test_mismatching_pair_evaluates_to_zero() {
        let result = evaluate_pair(1, 2);
        assert_eq!(result, 0);
    }

    #[test]
    fn test6() {
        let result = evaluate_pair(6, 6);
        assert_eq!(result, 6);
    }

    #[test]
    fn test() {
        let input = vec![1, 1];
        let result = solve_captcha(input);
        assert_eq!(result, 2);
    }

    #[test]
    fn test2() {
        let input = vec![1, 1, 1];
        let result = solve_captcha(input);
        assert_eq!(result, 3);
    }

    #[test]
    fn test3() {
        let input = vec![1, 1, 2];
        let result = solve_captcha(input);
        assert_eq!(result, 1);
    }

    #[test]
    fn first_part() {
        let raw_input = "494751136895345894732582362629576539599184296195318162664695189393364372585778868512194863927652788149779748657989318645936221887731542718562643272683862627537378624843614831337441659741281289638765171452576466381314558821636595394981788588673443769343597851883955668818165723174939893841654914556681324133667446412138511724424292394454166623639872425168644336248217213826339741267546823779383343362789527461579565822966859349777937921933694912369552152772735167832762563719664315456987186713541153781499646178238762644186484381142249926194743713139262596264878458636595896487362658672224346241358667234115974528626523648311919886566497837217169673923935143386823757293148719377821517314629812886912412829924484513493885672343964151252433622341141661523814465991516961684511941471572895453711624986269342398786175846925783918686856442684489873327497698963658862856336682422797551251489126661954848572297228765445646745256499679451426358865477844467458533962981852292513358871483321161973583245698763531598395467675529181496911117769834127516441369261275244225978893617456524385518493112272169767775861256649728253754964675812534546226295535939697352141217337346738553495616832783757866928174519145357234834584788253893618549484385733283627199445369658339175644484859385884574943219267922729967571943843794565736975716174727852348441254492886794362934343868643337828637454277582276962353246357835493338372219824371517526474283541714897994127864461433627894831268659336264234436872715374727211764167739169341999573855627775114848275268739159272518673316753672995297888734844388928439859359992475637439771269232916542385876779616695129412366735112593669719335783511355773814685491876721452994714318863716542473187246351548626157775143333161422867924437526253865859969947366972895674966845993244925218766937543487875485647329995285821739359369998935331986126873726737672159265827566443794515755939813676194755474477224152139987944419463371386499841415227734673733555261543871359797796529847861748979527579985757964742667473767269248335229836818297477665453189662485548925521497365877771665365728224394427883312135322325169141784";
        let input = raw_input.chars().map(|c| c.to_digit(10).unwrap() as i32).collect();
        assert_eq!(1150, solve_captcha(input))
    }

    #[test]
    fn second_part() {
        let raw_input = "494751136895345894732582362629576539599184296195318162664695189393364372585778868512194863927652788149779748657989318645936221887731542718562643272683862627537378624843614831337441659741281289638765171452576466381314558821636595394981788588673443769343597851883955668818165723174939893841654914556681324133667446412138511724424292394454166623639872425168644336248217213826339741267546823779383343362789527461579565822966859349777937921933694912369552152772735167832762563719664315456987186713541153781499646178238762644186484381142249926194743713139262596264878458636595896487362658672224346241358667234115974528626523648311919886566497837217169673923935143386823757293148719377821517314629812886912412829924484513493885672343964151252433622341141661523814465991516961684511941471572895453711624986269342398786175846925783918686856442684489873327497698963658862856336682422797551251489126661954848572297228765445646745256499679451426358865477844467458533962981852292513358871483321161973583245698763531598395467675529181496911117769834127516441369261275244225978893617456524385518493112272169767775861256649728253754964675812534546226295535939697352141217337346738553495616832783757866928174519145357234834584788253893618549484385733283627199445369658339175644484859385884574943219267922729967571943843794565736975716174727852348441254492886794362934343868643337828637454277582276962353246357835493338372219824371517526474283541714897994127864461433627894831268659336264234436872715374727211764167739169341999573855627775114848275268739159272518673316753672995297888734844388928439859359992475637439771269232916542385876779616695129412366735112593669719335783511355773814685491876721452994714318863716542473187246351548626157775143333161422867924437526253865859969947366972895674966845993244925218766937543487875485647329995285821739359369998935331986126873726737672159265827566443794515755939813676194755474477224152139987944419463371386499841415227734673733555261543871359797796529847861748979527579985757964742667473767269248335229836818297477665453189662485548925521497365877771665365728224394427883312135322325169141784";
        let input = raw_input.chars().map(|c| c.to_digit(10).unwrap() as i32).collect();
        assert_eq!(1064, calculate_captcha_2(input))
    }
}

